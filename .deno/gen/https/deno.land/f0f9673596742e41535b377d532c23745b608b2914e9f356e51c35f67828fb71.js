// Copyright 2018-2021 the Deno authors. All rights reserved. MIT license.
import { notImplemented } from "../_utils.ts";
import { fromFileUrl } from "../path.ts";
import { Buffer } from "../buffer.ts";
import { Readable as NodeReadable } from "../stream.ts";
export class ReadStream extends NodeReadable {
    path;
    constructor(path, opts){
        path = path instanceof URL ? fromFileUrl(path) : path;
        const hasBadOptions = opts && (opts.fd || opts.start || opts.end || opts.fs);
        if (hasBadOptions) {
            notImplemented(`fs.ReadStream.prototype.constructor with unsupported options (${JSON.stringify(opts)})`);
        }
        const file = Deno.openSync(path, {
            read: true
        });
        const buffer = new Uint8Array(16 * 1024);
        super({
            autoDestroy: true,
            emitClose: true,
            objectMode: false,
            read: async function(_size) {
                try {
                    const n = await file.read(buffer);
                    this.push(n ? Buffer.from(buffer.slice(0, n)) : null);
                } catch (err) {
                    this.destroy(err);
                }
            },
            destroy: (err, cb)=>{
                try {
                    file.close();
                // deno-lint-ignore no-empty
                } catch  {}
                cb(err);
            }
        });
        this.path = path;
    }
}
export function createReadStream(path, options) {
    return new ReadStream(path, options);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjE0Ny4wL25vZGUvX2ZzL19mc19zdHJlYW1zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjEgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBub3RJbXBsZW1lbnRlZCB9IGZyb20gXCIuLi9fdXRpbHMudHNcIjtcbmltcG9ydCB7IGZyb21GaWxlVXJsIH0gZnJvbSBcIi4uL3BhdGgudHNcIjtcbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCIuLi9idWZmZXIudHNcIjtcbmltcG9ydCB7IFJlYWRhYmxlIGFzIE5vZGVSZWFkYWJsZSB9IGZyb20gXCIuLi9zdHJlYW0udHNcIjtcblxudHlwZSBSZWFkU3RyZWFtT3B0aW9ucyA9IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuXG5leHBvcnQgY2xhc3MgUmVhZFN0cmVhbSBleHRlbmRzIE5vZGVSZWFkYWJsZSB7XG4gIHB1YmxpYyBwYXRoOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocGF0aDogc3RyaW5nIHwgVVJMLCBvcHRzPzogUmVhZFN0cmVhbU9wdGlvbnMpIHtcbiAgICBwYXRoID0gcGF0aCBpbnN0YW5jZW9mIFVSTCA/IGZyb21GaWxlVXJsKHBhdGgpIDogcGF0aDtcbiAgICBjb25zdCBoYXNCYWRPcHRpb25zID0gb3B0cyAmJiAoXG4gICAgICBvcHRzLmZkIHx8IG9wdHMuc3RhcnQgfHwgb3B0cy5lbmQgfHwgb3B0cy5mc1xuICAgICk7XG4gICAgaWYgKGhhc0JhZE9wdGlvbnMpIHtcbiAgICAgIG5vdEltcGxlbWVudGVkKFxuICAgICAgICBgZnMuUmVhZFN0cmVhbS5wcm90b3R5cGUuY29uc3RydWN0b3Igd2l0aCB1bnN1cHBvcnRlZCBvcHRpb25zICgke1xuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KG9wdHMpXG4gICAgICAgIH0pYCxcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGZpbGUgPSBEZW5vLm9wZW5TeW5jKHBhdGgsIHsgcmVhZDogdHJ1ZSB9KTtcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSgxNiAqIDEwMjQpO1xuICAgIHN1cGVyKHtcbiAgICAgIGF1dG9EZXN0cm95OiB0cnVlLFxuICAgICAgZW1pdENsb3NlOiB0cnVlLFxuICAgICAgb2JqZWN0TW9kZTogZmFsc2UsXG4gICAgICByZWFkOiBhc3luYyBmdW5jdGlvbiAoX3NpemUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBuID0gYXdhaXQgZmlsZS5yZWFkKGJ1ZmZlcik7XG4gICAgICAgICAgdGhpcy5wdXNoKG4gPyBCdWZmZXIuZnJvbShidWZmZXIuc2xpY2UoMCwgbikpIDogbnVsbCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHRoaXMuZGVzdHJveShlcnIgYXMgRXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogKGVyciwgY2IpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmaWxlLmNsb3NlKCk7XG4gICAgICAgICAgLy8gZGVuby1saW50LWlnbm9yZSBuby1lbXB0eVxuICAgICAgICB9IGNhdGNoIHt9XG4gICAgICAgIGNiKGVycik7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlYWRTdHJlYW0oXG4gIHBhdGg6IHN0cmluZyB8IFVSTCxcbiAgb3B0aW9ucz86IFJlYWRTdHJlYW1PcHRpb25zLFxuKTogUmVhZFN0cmVhbSB7XG4gIHJldHVybiBuZXcgUmVhZFN0cmVhbShwYXRoLCBvcHRpb25zKTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwRUFBMEU7QUFDMUUsU0FBUyxjQUFjLFFBQVEsY0FBYyxDQUFDO0FBQzlDLFNBQVMsV0FBVyxRQUFRLFlBQVksQ0FBQztBQUN6QyxTQUFTLE1BQU0sUUFBUSxjQUFjLENBQUM7QUFDdEMsU0FBUyxRQUFRLElBQUksWUFBWSxRQUFRLGNBQWMsQ0FBQztBQUl4RCxPQUFPLE1BQU0sVUFBVSxTQUFTLFlBQVk7SUFDMUMsQUFBTyxJQUFJLENBQVM7SUFFcEIsWUFBWSxJQUFrQixFQUFFLElBQXdCLENBQUU7UUFDeEQsSUFBSSxHQUFHLElBQUksWUFBWSxHQUFHLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN0RCxNQUFNLGFBQWEsR0FBRyxJQUFJLElBQUksQ0FDNUIsSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FDN0MsQUFBQztRQUNGLElBQUksYUFBYSxFQUFFO1lBQ2pCLGNBQWMsQ0FDWixDQUFDLDhEQUE4RCxFQUM3RCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUNyQixDQUFDLENBQUMsQ0FDSixDQUFDO1NBQ0g7UUFDRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRTtZQUFFLElBQUksRUFBRSxJQUFJO1NBQUUsQ0FBQyxBQUFDO1FBQ2pELE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQUFBQztRQUN6QyxLQUFLLENBQUM7WUFDSixXQUFXLEVBQUUsSUFBSTtZQUNqQixTQUFTLEVBQUUsSUFBSTtZQUNmLFVBQVUsRUFBRSxLQUFLO1lBQ2pCLElBQUksRUFBRSxlQUFnQixLQUFLLEVBQUU7Z0JBQzNCLElBQUk7b0JBQ0YsTUFBTSxDQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxBQUFDO29CQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7aUJBQ3ZELENBQUMsT0FBTyxHQUFHLEVBQUU7b0JBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQVUsQ0FBQztpQkFDNUI7YUFDRjtZQUNELE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUs7Z0JBQ3BCLElBQUk7b0JBQ0YsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNiLDRCQUE0QjtpQkFDN0IsQ0FBQyxPQUFNLEVBQUU7Z0JBQ1YsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ1Q7U0FDRixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztLQUNsQjtDQUNGO0FBRUQsT0FBTyxTQUFTLGdCQUFnQixDQUM5QixJQUFrQixFQUNsQixPQUEyQixFQUNmO0lBQ1osT0FBTyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDdEMifQ==