// Copyright 2020-present the denosaurs team. All rights reserved. MIT license.
import { emojis } from "./all.ts";
import { reUnicode } from "./unicode.ts";
// Regex to parse emoji in a string - e.g. :coffee:
const reEmojiName = /:([a-zA-Z0-9_\-\+]+):/g;
// Regex to trim whitespace. (with IE8 support)
const reTrimSpace = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
// Non spacing mark, some emoticons have them. It's the 'Variant Form',
// which provides more information so that emoticons can be rendered as
// more colorful graphics. FE0E is a unicode text version, where as FE0F
// should be rendered as a graphical version. The code gracefully degrades.
const NON_SPACING_MARK = String.fromCharCode(65039); // 65039 - '️' - 0xFE0F;
const reNonSpacing = new RegExp(NON_SPACING_MARK, "g");
/** Remove NON_SPACING_MARK from string. See above. */ function stripNSB(code) {
    return code.replace(reNonSpacing, "");
}
/** Removes colons on either side of the string. */ function stripColons(str) {
    var colonIndex = str.indexOf(":");
    if (colonIndex > -1) {
        if (colonIndex === str.length - 1) {
            str = str.substring(0, colonIndex);
            return stripColons(str);
        } else {
            str = str.substr(colonIndex + 1);
            return stripColons(str);
        }
    }
    return str;
}
/** Adds colons to either side of the string. */ function wrapColons(str) {
    return str.length > 0 ? ":" + str + ":" : str;
}
const byAlias = Object.fromEntries(emojis.map((emoji)=>emoji.aliases.map((alias)=>[
            alias,
            emoji
        ])).flat());
const byCode = Object.fromEntries(emojis.map((emoji)=>{
    return [
        stripNSB(emoji.emoji),
        emoji
    ];
}));
/** Get all emojis. */ export function all() {
    return emojis;
}
/** Get all emojis as alias map. */ export function aliasMap() {
    return byAlias;
}
/** Get all emojis as code map. */ export function codeMap() {
    return byCode;
}
/** Get emoji from alias. - e.g. "unicorn" -> 🦄 */ export function get(alias) {
    return byAlias[stripColons(alias)]?.emoji;
}
/** Get alias from emoji. - e.g. 👕 -> "shirt" */ export function alias(emoji) {
    return byCode[stripNSB(emoji)]?.aliases[0];
}
/** Get alias from emoji. - e.g. 👕 -> ["shirt", "tshirt"] */ export function aliases(emoji) {
    return byCode[stripNSB(emoji)]?.aliases;
}
/** Get emoji info from alias or emoji */ export function infoByAlias(raw) {
    return byAlias[stripColons(raw)];
}
/** Get emoji info from alias or emoji */ export function infoByCode(raw) {
    return byCode[stripNSB(raw)];
}
/** Get random emoji. - e.g. {emoji: "👕", alias: "shirt"} */ export function random() {
    const random = emojis[Math.floor(Math.random() * emojis.length)];
    const emoji = random.emoji;
    const alias = random.aliases[0];
    return {
        emoji,
        alias
    };
}
/** Strip all emojis in a string. */ export function strip(str) {
    return replace(str, "", true);
}
/** Replace all emojis in a string. */ export function replace(str, replacement = "", trim = false) {
    if (!str) return "";
    const replace = typeof replacement === "function" ? replacement : ()=>{
        return replacement;
    };
    const match = str.match(reUnicode) ?? [];
    const result = match.map((s, i)=>{
        let emoji = byCode[stripNSB(s)];
        if (emoji && trim && match[i + 1] === " ") {
            match[i + 1] = "";
        }
        return emoji ? replace(emoji) : s;
    }).join("");
    return trim ? result.replace(reTrimSpace, "") : result;
}
/** Replace all emoji names in a string with actual emojis. */ export function emojify(str) {
    if (!str) return "";
    return str.split(reEmojiName).map((s, i)=>{
        if (i % 2 === 0) return s;
        let emoji = get(s);
        if (!emoji) emoji = wrapColons(s);
        return emoji;
    }).join("");
}
/** Replace all emoji in a string with actual emoji names. */ export function unemojify(str) {
    return replace(str, (emoji)=>wrapColons(emoji.aliases[0]));
}
/** Tagged template version of emojify */ export function emoji(template, ...args) {
    const chunks = [];
    for(let i = 0; i < template.length; i++){
        chunks.push(emojify(template[i]));
        if (args[i]) chunks.push(emojify(args[i]));
    }
    return chunks.join("");
}
//# sourceMappingURL=data:application/json;base64,