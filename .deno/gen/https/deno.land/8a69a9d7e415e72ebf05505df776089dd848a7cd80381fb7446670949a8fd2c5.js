import { httpErrors } from "./httpError.ts";
const COLON = ":".charCodeAt(0);
const HTAB = "\t".charCodeAt(0);
const SPACE = " ".charCodeAt(0);
const decoder = new TextDecoder();
/** With a provided attribute pattern, return a RegExp which will match and
 * capture in the first group the value of the attribute from a header value. */ export function toParamRegExp(attributePattern, flags) {
    // deno-fmt-ignore
    return new RegExp(`(?:^|;)\\s*${attributePattern}\\s*=\\s*` + `(` + `[^";\\s][^;\\s]*` + `|` + `"(?:[^"\\\\]|\\\\"?)+"?` + `)`, flags);
}
/** Asynchronously read the headers out of body request and resolve with them as
 * a `Headers` object. */ export async function readHeaders(body) {
    const headers = {
    };
    let readResult = await body.readLine();
    while(readResult){
        const { bytes  } = readResult;
        if (!bytes.length) {
            return headers;
        }
        let i = bytes.indexOf(COLON);
        if (i === -1) {
            throw new httpErrors.BadRequest(`Malformed header: ${decoder.decode(bytes)}`);
        }
        const key = decoder.decode(bytes.subarray(0, i)).trim().toLowerCase();
        if (key === "") {
            throw new httpErrors.BadRequest("Invalid header key.");
        }
        i++;
        while(i < bytes.byteLength && (bytes[i] === SPACE || bytes[i] === HTAB)){
            i++;
        }
        const value = decoder.decode(bytes.subarray(i)).trim();
        headers[key] = value;
        readResult = await body.readLine();
    }
    throw new httpErrors.BadRequest("Unexpected end of body reached.");
}
/** Unquotes attribute values that might be pass as part of a header. */ export function unquote(value) {
    if (value.startsWith(`"`)) {
        const parts = value.slice(1).split(`\\"`);
        for(let i = 0; i < parts.length; ++i){
            const quoteIndex = parts[i].indexOf(`"`);
            if (quoteIndex !== -1) {
                parts[i] = parts[i].slice(0, quoteIndex);
                parts.length = i + 1; // Truncates and stops the loop
            }
            parts[i] = parts[i].replace(/\\(.)/g, "$1");
        }
        value = parts.join(`"`);
    }
    return value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvb2FrQHYxMC4xLjAvaGVhZGVycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIxIHRoZSBvYWsgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5cbmltcG9ydCB0eXBlIHsgQnVmUmVhZGVyIH0gZnJvbSBcIi4vYnVmX3JlYWRlci50c1wiO1xuaW1wb3J0IHsgaHR0cEVycm9ycyB9IGZyb20gXCIuL2h0dHBFcnJvci50c1wiO1xuXG5jb25zdCBDT0xPTiA9IFwiOlwiLmNoYXJDb2RlQXQoMCk7XG5jb25zdCBIVEFCID0gXCJcXHRcIi5jaGFyQ29kZUF0KDApO1xuY29uc3QgU1BBQ0UgPSBcIiBcIi5jaGFyQ29kZUF0KDApO1xuXG5jb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG5cbi8qKiBXaXRoIGEgcHJvdmlkZWQgYXR0cmlidXRlIHBhdHRlcm4sIHJldHVybiBhIFJlZ0V4cCB3aGljaCB3aWxsIG1hdGNoIGFuZFxuICogY2FwdHVyZSBpbiB0aGUgZmlyc3QgZ3JvdXAgdGhlIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgZnJvbSBhIGhlYWRlciB2YWx1ZS4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b1BhcmFtUmVnRXhwKFxuICBhdHRyaWJ1dGVQYXR0ZXJuOiBzdHJpbmcsXG4gIGZsYWdzPzogc3RyaW5nLFxuKTogUmVnRXhwIHtcbiAgLy8gZGVuby1mbXQtaWdub3JlXG4gIHJldHVybiBuZXcgUmVnRXhwKFxuICAgIGAoPzpefDspXFxcXHMqJHthdHRyaWJ1dGVQYXR0ZXJufVxcXFxzKj1cXFxccypgICtcbiAgICBgKGAgK1xuICAgICAgYFteXCI7XFxcXHNdW147XFxcXHNdKmAgK1xuICAgIGB8YCArXG4gICAgICBgXCIoPzpbXlwiXFxcXFxcXFxdfFxcXFxcXFxcXCI/KStcIj9gICtcbiAgICBgKWAsXG4gICAgZmxhZ3NcbiAgKTtcbn1cblxuLyoqIEFzeW5jaHJvbm91c2x5IHJlYWQgdGhlIGhlYWRlcnMgb3V0IG9mIGJvZHkgcmVxdWVzdCBhbmQgcmVzb2x2ZSB3aXRoIHRoZW0gYXNcbiAqIGEgYEhlYWRlcnNgIG9iamVjdC4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkSGVhZGVycyhcbiAgYm9keTogQnVmUmVhZGVyLFxuKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiB7XG4gIGNvbnN0IGhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgbGV0IHJlYWRSZXN1bHQgPSBhd2FpdCBib2R5LnJlYWRMaW5lKCk7XG4gIHdoaWxlIChyZWFkUmVzdWx0KSB7XG4gICAgY29uc3QgeyBieXRlcyB9ID0gcmVhZFJlc3VsdDtcbiAgICBpZiAoIWJ5dGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGhlYWRlcnM7XG4gICAgfVxuICAgIGxldCBpID0gYnl0ZXMuaW5kZXhPZihDT0xPTik7XG4gICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgaHR0cEVycm9ycy5CYWRSZXF1ZXN0KFxuICAgICAgICBgTWFsZm9ybWVkIGhlYWRlcjogJHtkZWNvZGVyLmRlY29kZShieXRlcyl9YCxcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IGRlY29kZXIuZGVjb2RlKGJ5dGVzLnN1YmFycmF5KDAsIGkpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoa2V5ID09PSBcIlwiKSB7XG4gICAgICB0aHJvdyBuZXcgaHR0cEVycm9ycy5CYWRSZXF1ZXN0KFwiSW52YWxpZCBoZWFkZXIga2V5LlwiKTtcbiAgICB9XG4gICAgaSsrO1xuICAgIHdoaWxlIChpIDwgYnl0ZXMuYnl0ZUxlbmd0aCAmJiAoYnl0ZXNbaV0gPT09IFNQQUNFIHx8IGJ5dGVzW2ldID09PSBIVEFCKSkge1xuICAgICAgaSsrO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IGRlY29kZXIuZGVjb2RlKGJ5dGVzLnN1YmFycmF5KGkpKS50cmltKCk7XG4gICAgaGVhZGVyc1trZXldID0gdmFsdWU7XG4gICAgcmVhZFJlc3VsdCA9IGF3YWl0IGJvZHkucmVhZExpbmUoKTtcbiAgfVxuICB0aHJvdyBuZXcgaHR0cEVycm9ycy5CYWRSZXF1ZXN0KFwiVW5leHBlY3RlZCBlbmQgb2YgYm9keSByZWFjaGVkLlwiKTtcbn1cblxuLyoqIFVucXVvdGVzIGF0dHJpYnV0ZSB2YWx1ZXMgdGhhdCBtaWdodCBiZSBwYXNzIGFzIHBhcnQgb2YgYSBoZWFkZXIuICovXG5leHBvcnQgZnVuY3Rpb24gdW5xdW90ZSh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoYFwiYCkpIHtcbiAgICBjb25zdCBwYXJ0cyA9IHZhbHVlLnNsaWNlKDEpLnNwbGl0KGBcXFxcXCJgKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCBxdW90ZUluZGV4ID0gcGFydHNbaV0uaW5kZXhPZihgXCJgKTtcbiAgICAgIGlmIChxdW90ZUluZGV4ICE9PSAtMSkge1xuICAgICAgICBwYXJ0c1tpXSA9IHBhcnRzW2ldLnNsaWNlKDAsIHF1b3RlSW5kZXgpO1xuICAgICAgICBwYXJ0cy5sZW5ndGggPSBpICsgMTsgLy8gVHJ1bmNhdGVzIGFuZCBzdG9wcyB0aGUgbG9vcFxuICAgICAgfVxuICAgICAgcGFydHNbaV0gPSBwYXJ0c1tpXS5yZXBsYWNlKC9cXFxcKC4pL2csIFwiJDFcIik7XG4gICAgfVxuICAgIHZhbHVlID0gcGFydHMuam9pbihgXCJgKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxHQUFHLFVBQVUsUUFBUSxDQUFnQjtBQUUzQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUcsR0FBQyxVQUFVLENBQUMsQ0FBQztBQUM5QixLQUFLLENBQUMsSUFBSSxHQUFHLENBQUksSUFBQyxVQUFV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